package bai9;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<BankAccount> accounts = new ArrayList<>();

        accounts.add(new BankAccount("123456", 5000000));
        accounts.add(new BankAccount("987654", 2000000));
        accounts.add(new BankAccount("456789", 1000000));

        while (true) {
            System.out.println("\nQU·∫¢N L√ù GIAO D·ªäCH NG√ÇN H√ÄNG");
            System.out.println("1.Ô∏è G·ª≠i ti·ªÅn");
            System.out.println("2.Ô∏è R√∫t ti·ªÅn");
            System.out.println("3Ô∏è. Chuy·ªÉn ti·ªÅn");
            System.out.println("4Ô∏è. Hi·ªÉn th·ªã t√†i kho·∫£n");
            System.out.println("0Ô∏è. Tho√°t");
            System.out.print("Ch·ªçn ch·ª©c nƒÉng: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("üîπ Nh·∫≠p s·ªë t√†i kho·∫£n: ");
                    String depositAccId = scanner.next();
                    BankAccount depositAcc = findAccount(accounts, depositAccId);
                    if (depositAcc != null) {
                        System.out.print("Nh·∫≠p s·ªë ti·ªÅn g·ª≠i: ");
                        double amount = scanner.nextDouble();
                        try {
                            depositAcc.deposit(amount);
                        } catch (IllegalArgumentException e) {
                            System.out.println(e.getMessage());
                        }
                    } else {
                        System.out.println("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
                    }
                    break;

                case 2:
                    System.out.print("Nh·∫≠p s·ªë t√†i kho·∫£n: ");
                    String withdrawAccId = scanner.next();
                    BankAccount withdrawAcc = findAccount(accounts, withdrawAccId);
                    if (withdrawAcc != null) {
                        System.out.print("Nh·∫≠p s·ªë ti·ªÅn r√∫t: ");
                        double amount = scanner.nextDouble();
                        try {
                            withdrawAcc.withdraw(amount);
                        } catch (IllegalArgumentException e) {
                            System.out.println(e.getMessage());
                        }
                    } else {
                        System.out.println("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
                    }
                    break;

                case 3:
                    System.out.print("üîπ Nh·∫≠p s·ªë t√†i kho·∫£n ngu·ªìn: ");
                    String senderAccId = scanner.next();
                    BankAccount sender = findAccount(accounts, senderAccId);
                    if (sender != null) {
                        System.out.print("üîπ Nh·∫≠p s·ªë t√†i kho·∫£n ƒë√≠ch: ");
                        String receiverAccId = scanner.next();
                        BankAccount receiver = findAccount(accounts, receiverAccId);
                        if (receiver != null) {
                            System.out.print("Nh·∫≠p s·ªë ti·ªÅn chuy·ªÉn: ");
                            double amount = scanner.nextDouble();
                            try {
                                sender.transfer(receiver, amount);
                            } catch (IllegalArgumentException e) {
                                System.out.println(e.getMessage());
                            }
                        } else {
                            System.out.println("T√†i kho·∫£n nh·∫≠n kh√¥ng t·ªìn t·∫°i!");
                        }
                    } else {
                        System.out.println("T√†i kho·∫£n ngu·ªìn kh√¥ng t·ªìn t·∫°i!");
                    }
                    break;

                case 4:
                    System.out.println("DANH S√ÅCH T√ÄI KHO·∫¢N:");
                    for (BankAccount acc : accounts) {
                        acc.displayInfo();
                    }
                    break;

                default:
                    System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
            }
        }
    }

    private static BankAccount findAccount(ArrayList<BankAccount> accounts, String accountId) {
        for (BankAccount acc : accounts) {
            if (acc.getAccountId().equals(accountId)) {
                return acc;
            }
        }
        return null;
    }
}
